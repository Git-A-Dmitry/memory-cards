{"mappings":"AAEA,MAAMA,eAAiBC,SAASC,eAAe,mBACzCC,QAAUF,SAASC,eAAe,QAClCE,QAAUH,SAASC,eAAe,QAClCG,UAAYJ,SAASC,eAAe,WACpCI,QAAUL,SAASC,eAAe,QAClCK,QAAUN,SAASC,eAAe,QAClCM,WAAaP,SAASC,eAAe,YACrCO,SAAWR,SAASC,eAAe,UACnCQ,WAAaT,SAASC,eAAe,YACrCS,SAAWV,SAASC,eAAe,SACnCU,aAAeX,SAASC,eAAe,iBACvCW,WAAaZ,SAASa,cAAc,eACpCC,YAAcd,SAASC,eAAe,aACtCc,eAAiBf,SAASC,eAAe,eACzCe,aAAehB,SAASC,eAAe,UAG7C,IAAIgB,kBAAoB,EAGxB,MAAMC,QAAU,GAGVC,UAAYC,eAGlB,SAASC,cACPF,UAAUG,SAAQ,CAACC,EAAMC,IAAUC,WAAWF,EAAMC,I,CAItD,SAASC,WAAWF,EAAMC,GACxB,MAAME,EAAO1B,SAAS2B,cAAc,OACpCD,EAAKE,UAAUC,IAAI,QAEL,IAAVL,GACFE,EAAKE,UAAUC,IAAI,UAGrBH,EAAKI,UAAY,oFAGNP,EAAKQ,iFAILR,EAAKS,2CAKhBN,EAAKO,iBAAiB,SAAS,IAAMP,EAAKE,UAAUM,OAAO,iBAE3DhB,QAAQiB,KAAKT,GAEb3B,eAAeqC,YAAYV,GAE3BW,mB,CAIF,SAASA,oBACPjC,UAAUkC,UAAY,GAAGrB,kBAAoB,OAAOC,QAAQqB,Q,CAI9D,SAASnB,eACP,MAAMoB,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,UAC9C,OAAiB,OAAVJ,EAAiB,GAAKA,C,CAI/B,SAASK,aAAaL,GACpBG,aAAaG,QAAQ,QAASL,KAAKM,UAAUP,IAC7CQ,OAAOC,SAASC,Q,CAGlB7B,cAGAlB,QAAQ8B,iBAAiB,SAAS,KAChCf,QAAQD,mBAAmBkC,UAAY,YAEvClC,mBAAwC,EAEpCA,kBAAoBC,QAAQqB,OAAS,IACvCtB,kBAAoBC,QAAQqB,OAAS,GAIvCrB,QAAQD,mBAAmBkC,UAAY,cAEvCd,mBAAmB,IAIrBnC,QAAQ+B,iBAAiB,SAAS,KAChCf,QAAQD,mBAAmBkC,UAAY,aAEvClC,mBAAwC,EAEpCA,kBAAoB,IACtBA,kBAAoB,GAEtBC,QAAQD,mBAAmBkC,UAAY,cAEvCd,mBAAmB,IAIrBhC,QAAQ4B,iBAAiB,SAAS,IAAMtB,aAAaiB,UAAUC,IAAI,UAEnEvB,QAAQ2B,iBAAiB,SAAS,IAAMtB,aAAaiB,UAAUwB,OAAO,UAGtE3C,WAAWwB,iBAAiB,SAAS,KACnC,MAAMF,EAAWxB,WAAW8C,MACtBrB,EAASxB,SAAS6C,MAGxB,GAAItB,EAASuB,QAAUtB,EAAOsB,OAAQ,CAEpC,MAAMC,EAAU,CAAExB,WAAUC,UAE5BP,WAAW8B,GAEXhD,WAAW8C,MAAQ,GACnB7C,SAAS6C,MAAQ,GAEjB1C,aAAaiB,UAAUwB,OAAO,QAE9BjC,UAAUgB,KAAKoB,GACfV,aAAa1B,U,KAKjBP,WAAW4C,QAAU,WACnB1C,YAAY2C,MAAMC,QAAU,O,EAG9B1C,aAAawC,QAAU,WACrB1C,YAAY2C,MAAMC,QAAU,M,EAI9BhD,SAASuB,iBAAiB,SAAS,KACjCU,aAAagB,QACb5D,eAAe+B,UAAY,GAC3BkB,OAAOC,SAASC,QAAQ,IAI1BnC,eAAekB,iBAAiB,SAAS,KACvCd,UAAUyC,OAAO3C,kBAAmB,GACpC0B,aAAaG,QAAQ,QAASL,KAAKM,UAAU5B,YAE7C6B,OAAOC,SAASC,QAAQ","sources":["src/main.js"],"sourcesContent":["// import { cardsData } from './scripts/cardsData';\n\nconst cardsContainer = document.getElementById('cards-container');\nconst prevBtn = document.getElementById('prev');\nconst nextBtn = document.getElementById('next');\nconst currentEl = document.getElementById('current');\nconst showBtn = document.getElementById('show');\nconst hideBtn = document.getElementById('hide');\nconst questionEl = document.getElementById('question');\nconst answerEl = document.getElementById('answer');\nconst addCardBtn = document.getElementById('add-card');\nconst clearBtn = document.getElementById('clear');\nconst addContainer = document.getElementById('add-container');\nconst clearCards = document.querySelector('.btn-delete');\nconst modalButton = document.getElementById('clear-all');\nconst delCurrentCard = document.getElementById('del-current');\nconst cancelDelete = document.getElementById('cancel');\n\n// Keep track of current card\nlet currentActiveCard = 0;\n\n// Store DOM cards\nconst cardsEl = [];\n\n// Store card data\nconst cardsData = getCardsData();\n\n// Create all cards\nfunction createCards() {\n  cardsData.forEach((data, index) => createCard(data, index));\n}\n\n// Create a single card in DOM\nfunction createCard(data, index) {\n  const card = document.createElement('div');\n  card.classList.add('card');\n\n  if (index === 0) {\n    card.classList.add('active');\n  }\n\n  card.innerHTML = `\n    <div class=\"inner-card\">\n      <div class=\"inner-card-front\">\n        <p>${data.question}</p>\n      </div>\n\n      <div class=\"inner-card-back\">\n        <p>${data.answer}</p>\n      </div>\n    </div>\n  `;\n\n  card.addEventListener('click', () => card.classList.toggle('show-answer'));\n\n  cardsEl.push(card);\n\n  cardsContainer.appendChild(card);\n\n  updateCurrentText();\n}\n\n// Show number of cards\nfunction updateCurrentText() {\n  currentEl.innerText = `${currentActiveCard + 1} / ${cardsEl.length}`;\n}\n\n// Get cards from local storage\nfunction getCardsData() {\n  const cards = JSON.parse(localStorage.getItem('cards'));\n  return cards === null ? [] : cards;\n}\n\n// Add card to local storage\nfunction setCardsData(cards) {\n  localStorage.setItem('cards', JSON.stringify(cards));\n  window.location.reload();\n}\n\ncreateCards();\n\n// Next Button\nnextBtn.addEventListener('click', () => {\n  cardsEl[currentActiveCard].className = 'card left';\n\n  currentActiveCard = currentActiveCard + 1;\n\n  if (currentActiveCard > cardsEl.length - 1) {\n    currentActiveCard = cardsEl.length - 1;\n  }\n  // У нас карты начинаются с единицы, а массив cardsEl начинается с нуля, поэтому мы от длины массива вычитаем 1.\n\n  cardsEl[currentActiveCard].className = 'card active';\n\n  updateCurrentText();\n});\n\n// Previous Button\nprevBtn.addEventListener('click', () => {\n  cardsEl[currentActiveCard].className = 'card right';\n\n  currentActiveCard = currentActiveCard - 1;\n\n  if (currentActiveCard < 0) {\n    currentActiveCard = 0;\n  }\n  cardsEl[currentActiveCard].className = 'card active';\n\n  updateCurrentText();\n});\n\n// Show add container\nshowBtn.addEventListener('click', () => addContainer.classList.add('show'));\n// Hide add container\nhideBtn.addEventListener('click', () => addContainer.classList.remove('show'));\n\n// Add a new card\naddCardBtn.addEventListener('click', () => {\n  const question = questionEl.value;\n  const answer = answerEl.value;\n  // console.log(question, answer);\n\n  if (question.trim() && answer.trim()) {\n    // trim() method removes whitespace from both sides of a string\n    const newCard = { question, answer };\n    // const newCard = {question: question, answer: answer} // the same\n    createCard(newCard);\n\n    questionEl.value = '';\n    answerEl.value = '';\n\n    addContainer.classList.remove('show');\n\n    cardsData.push(newCard);\n    setCardsData(cardsData);\n  }\n});\n\n// Open modal\nclearCards.onclick = function () {\n  modalButton.style.display = 'block';\n};\n\ncancelDelete.onclick = function () {\n  modalButton.style.display = 'none';\n};\n\n// Delete all cards\nclearBtn.addEventListener('click', () => {\n  localStorage.clear();\n  cardsContainer.innerHTML = '';\n  window.location.reload();\n});\n\n// Delete a current card\ndelCurrentCard.addEventListener('click', () => {\n  cardsData.splice(currentActiveCard, 1);\n  localStorage.setItem('cards', JSON.stringify(cardsData));\n\n  window.location.reload();\n});\n"],"names":["cardsContainer","document","getElementById","prevBtn","nextBtn","currentEl","showBtn","hideBtn","questionEl","answerEl","addCardBtn","clearBtn","addContainer","clearCards","querySelector","modalButton","delCurrentCard","cancelDelete","currentActiveCard","cardsEl","cardsData","getCardsData","createCards","forEach","data","index","createCard","card","createElement","classList","add","innerHTML","question","answer","addEventListener","toggle","push","appendChild","updateCurrentText","innerText","length","cards","JSON","parse","localStorage","getItem","setCardsData","setItem","stringify","window","location","reload","className","remove","value","trim","newCard","onclick","style","display","clear","splice"],"version":3,"file":"index.8e1eeb83.js.map"}